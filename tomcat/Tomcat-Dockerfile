
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  

# Image Create
# docker image build -t customize_nginx .

# Container Create
# docker container run -d -p 1111:80 --rm --name  customize_nginx

# Daocker Registery Create
# Step-1: Dockerfile ile image oluştur => docker image build -t customize_nginx .
# Step-2: DockerHub git public veya private repository oluştur.
# Step-3: docker ps
# Step-4: image Name: customize_nginx
# Step-5: docker image tag imageName javahamitmizrak/oluşturulmuşRepositoryAdi
# Step-5: docker image tag customize_nginx javahamitmizrak/oluşturulmuşRepositoryAdi
# Step-6: docker push javahamitmizrak/oluşturulmuşRepositoryAdi

# ÖNEMLİ NOT: eğer windows üzerinden çalıştırıyorsanız sudo tanımayacaktır.
# ÖNEMLİ NOT: nginx eğer browserda istediğiniz sonuç çıkmazsa browserin cache belleğini temizleyiniz. yoksa nginx'in kendi sayfasını görürüsünüz.


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  
# IMAGE
# ubuntu Image
FROM ubuntu:20.04

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
# MAINTAINER
LABEL maintainer="hamitmizrak@gmail.com"

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
# ENVIRONMENT
# Ortam Değişkenleri
ENV AUTHOR="Hamit Mızrak"
ENV APP_NAME="Ubuntu, Apache Tomcat, JDK"
ENV YEAR="2024"
ENV TECH="for devops"
ENV VERSION="v1.0.0"
ENV TOMCAT_HOST=localhost
ENV TOMCAT_PORT=2222

# Ortam Değişkenleri Çalıştırmak
RUN echo "Yazar: $AUTHOR"
RUN echo "Uygulama: $APP_NAME"
RUN echo "Version: $VERSION"
RUN echo "Year: $YEAR"
RUN echo "Yazar: $AUTHOR"
RUN echo "URL: http://$TOMCAT_HOST:$TOMCAT_PORT"

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
# PERSIST
VOLUME /tmp

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
# COPY
# Local bilgisayarımdaki bilgileri Docker image dosyaları ile yer değiştirmek
COPY ./config/tomcat-users.xml /usr/local/tomcat/conf
COPY ./config/context.xml /usr/local/tomcat/webapps/manager/META-INF

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
# Tomcat War Added
COPY ./webapps/sample.war /usr/local/tomcat/webapps


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
# Dockerfile işlemleri takılmadan, kesintisiz olarak çalışsın
# Set environment variables for non-interactive installs
# ENV DEBIAN_FRONTEND=noninteractive komutu, Debian tabanlı sistemlerde (bu durumda Ubuntu) paket yönetim sistemi olan apt-get ile 
# çalışırken, etkileşimli soruları önlemek ve otomatik kurulumu sağlamak için kullanılır. Bu özellikle Dockerfile'da kullanışlıdır,
# çünkü Dockerfile işlemleri otomatik ve kesintisiz olmalıdır.
ENV DEBIAN_FRONTEND=noninteractive

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
# JDK
RUN apt-get update && apt-get install -y openjdk-11-jre-headless curl && \
apt-get clean && rm -rf /var/lib/apt/lists/*


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
# TOMCAT
# Set environment variables for Tomcat
ENV CATALINA_HOME=/usr/local/tomcat
ENV PATH=$CATALINA_HOME/bin:$PATH

# Create Tomcat directory
RUN mkdir -p $CATALINA_HOME

# Download and install Tomcat
RUN curl -L https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.25/bin/apache-tomcat-10.1.25.tar.gz -o /tmp/tomcat.tar.gz && \
    tar xzf /tmp/tomcat.tar.gz -C $CATALINA_HOME --strip-components=1 && \
    rm /tmp/tomcat.tar.gz


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
# EXPOSE
# apache Tomcat Default
EXPOSE 8080


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
# HEALTHCHECK         ==> Bu image dosyasının sağlık durumu (Container Çalışıyor mu)
# --interval=30s      ==> 30 saniyede bir sağlık kontrolü yapılsın
# --timeout=10s       ==> 10 saniyede Sağlık kontrolünü tamamlasın
# --start-periyod=5s  ==> Konteynar başladığında sağlık kontrolünün başlamasın için 5 saniye bekle
# --retries=3         ==> Sağlık kontrolünü eğer ilk denemede başarısız olursa 3 defa daha  çalışsın.
# Eğer bu 3s komutu belirtilenin dışına çıkarsa Docker sağlıksız olarak işaretlenir
# CMD wget --quiet --tries=1 --spider http://localhost : wget ile localhost istek atmak
HEALTHCHECK --interval=30s --timeout=10s \
    --start-period=5s --retries=3 \
    CMD curl -f http://${NGINX_HOST}:${NGINX_PORT}/ || exit 1
#CMD wget --quiet --tries=1  --spider http://localhost:80 || exit 1



##########################################################################
# Dockerfile: Kendi image dosyalarımızı oluşturmak için
# Dockerfile Çalıştırma
# docker build -t image_name .

# docker build -t my_tomcat2 .
# docker build . => Image Adını yazmadan oluştur.

# Eğer Dockerfile isminden farklı bir isim kullanırsanız (-f) yazmalısınız
# docker build -t my_tomcat2  -f _2_Dockerfile .

# docker ps 
# docker run -d -p 2222:8080 --name tomcat-container my_tomcat2

# docker ps 
# docker ps -a
# docker container ls 
# docker container ls -a 
# curl localhost:2222

# winpty docker container exec -it tomcat-container bash
# ls -al 
# cd /usr/local/tomcat/bin
# shutdown.sh 

# docker container start my_tomcat2